import sys
import multiprocessing as mp


def nth_digit(num, nth):
    """Return value at nth digit of num; indexing starts at 0""" 
    return (num % 10 ** (nth + 1) - num % 10 ** nth) // 10 ** nth


def sum_square_digits(num):
    """Return sum of square of digits for integer 'num'"""
    def _gen_squares():
        i = 0
        while num % 10 ** i != num:
             yield nth_digit(num, i) ** 2
             i += 1
    return sum(_gen_squares())


def is_happy(num):
    for _ in xrange(100):
        """March through before checking for loops"""
        if num == 1:
            return 1 
        num = sum_square_digits(num)
    
    # Pointers for Loops
    num1, num2 = sum_square_digits(num), num
    results2 = mp.Queue()

    # Start loop1 first, check lagging loop2 results against and see if match
    loop1 = mp.Process(target=loop1, args=num1)
    loop2 = mp.Process


def loop1():
    # Loop 1
    while True:
         if num1 == 1:
              return 1
         if num1 == num2:
              return 0


def loop2():
    pass

if __name__ == "__main__":
    test_cases = open(sys.argv[1], 'r')
    for test in test_cases:
        num = int(test)
        print is_happy(num)
        
        
