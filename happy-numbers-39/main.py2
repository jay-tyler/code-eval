import sys


def nth_digit(num, nth):
    """Return value at nth digit of num; indexing starts at 0""" 
    return (num % 10 ** (nth + 1) - num % 10 ** nth) // 10 ** nth


def sum_square_digits(num):
    """Return sum of square of digits for integer 'num'"""
    def _gen_squares():
        i = 0
        while num % 10 ** i != num:
             yield nth_digit(num, i) ** 2
             i += 1
    return sum(_gen_squares())


def is_happy(num):
    """Return if number is 'happy'; 1 for True, 0 False
    
    Number is happy if sum of square of digits or recursive sum of square of
    digits is equal to one"""

    cached = num
    for _ in xrange(100):
        if cached == 1:
            return 1 
        cached = sum_square_digits(cached)
    return 0


if __name__ == "__main__":
    test_cases = open(sys.argv[1], 'r')
    for test in test_cases:
        num = int(test)
        print is_happy(num)
    test_cases.close()
        
