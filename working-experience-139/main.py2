from __future__ import division
import sys
import calendar
import datetime
from math import floor


def datetime_range(strin):
    """Return a tuple of datetimes from strin.
    
    Expected strin formatting is e.g. "Jan 2010-Dec 2010"
    
    Tuple of datetimes returned. Start is first day of month, End is last day.
    """

    date_strs = strin.split("-")
    start = datetime.datetime.strptime(date_strs[0], "%b %Y")
    end = datetime.datetime.strptime(date_strs[1], "%b %Y")

    # Adjust for end of month
    mo_days = calendar.monthrange(end.year, end.month)[1] - 1
    end = end + datetime.timedelta(days=mo_days)
    
    return start, end


def attempt_combine(range1, range2):
    """See if range2 is at all contained in range1. Return a truncated range if so."""

    if range1[0] < range2[0]:
       # Want range1 to always be earlier starting
       range1, range2 = range1, range2
    if range1[1] > range2[1]:
       # Case of range2-end being inside range1; full overlap
       return range1,
    elif range1[1] > range2[0]:
       # Case of range2-start being inside range1; partial overlap
       return range1, (range1[1], range2[1])
    else:
       return range1, range2


def clean_ranges(ranges):
    """Take a list of potentially overlapping date ranges (ascending sorted) and clean"""
    p1 = ranges.pop()
    p2 = ranges.pop()
    cached = []
    print "\n-----------------------------------------------------------\n\n"
    def do_iter(p1, p2): 
        print "BEFORE COMBINE\np1={}\np2={}\n".format(p1, p2)
        result = attempt_combine(p1, p2)
        print "AFTER ATTEMPT\nresult={}\n".format(result)
        if len(result) == 2:
            cached.append(result[0])
        print "CACHED after any append\n{}\n".format(cached)
        p1 = p2
        try:
            p2 = ranges.pop()
        except IndexError:
            cached.append(p2)
            p2 = None
        return p1, p2
    do_iter(p1, p2)
    while p2:
        p1, p2 = do_iter(p1, p2)
    
    # i in xrange(len(ranges), 1, -1):
    #    out = attempt_combine(ranges[i - 2], ranges[i - 1])
    #    cached.extend(out)
    return cached


def sum_ranges(ranges):
    """Return int years from datetime ranges"""
    sum = 0
    for range in ranges:
        delta = range[1] - range[0]
        sum += delta.days
    return sum // 365


if __name__ == "__main__":
    test_cases = open(sys.argv[1], 'r')

    for case in test_cases:
        case = case.rstrip()
        args = case.split("; ")
        ranges = [datetime_range(arg) for arg in args]
        # print "UNSORTED:\n{}".format(ranges)
        ranges.sort()
        # print "SORTED:\n{}".format(ranges)
        ranges = clean_ranges(ranges)
        print "CLEANED:\n{}".format(ranges)
        # print "SUM:\n{}".format(sum_ranges(ranges))
        
    test_cases.close()
